#!/usr/bin/env bash
# File    : aiman
# Brief   : Main script
# Author  : Martin Rizzo | <martinrizzo@gmail.com>
# Date    : May 5, 2023
# Repo    : https://github.com/martin-rizzo/AIMan
# License : MIT
#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#                                    AIMan
#        A basic package management system for AI open source projects
#
#     Copyright (c) 2023-2024 Martin Rizzo
#
#     Permission is hereby granted, free of charge, to any person obtaining
#     a copy of this software and associated documentation files (the
#     "Software"), to deal in the Software without restriction, including
#     without limitation the rights to use, copy, modify, merge, publish,
#     distribute, sublicense, and/or sell copies of the Software, and to
#     permit persons to whom the Software is furnished to do so, subject to
#     the following conditions:
#
#     The above copyright notice and this permission notice shall be
#     included in all copies or substantial portions of the Software.
#
#     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
#     EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
#     MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
#     IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
#     CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
#     TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE
#     SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
ScriptName=${BASH_SOURCE[0]##*/}
ScriptVer=0.2      # script version
ProjectName=       # name of the project on which the command will be executed
CommandName=       # name of the command to be executed
CommandParams=()   # parameters for the command
Help="
Usage: $ScriptName [PROJECT.]COMMAND [param1] [param2] ... [paramN]

  A command-line package manager for AI open source projects.

Commands:
    install    Install projects on the local directory.
    launch     Launch projects that have been previously installed.
    remove     Remove installed projects.
    list       List all available projects.
    info       Display details about a project.
    console    Execute commands within the python virtual environment.
    setdir     Change the directories used for input and output.
    add2path   Add aiman to the user's PATH.

Run '$ScriptName COMMAND --help' for more information on a command.

Options:
    -h, --help      Show command help
    -V, --version   Show $ScriptName version and exit

Examples:
    $ScriptName list
    $ScriptName webui.info
    $ScriptName webui.console pip upgrade
    $ScriptName launch --help
"

# Determine the main directory containing the script
MainDir=$(realpath $(dirname "${BASH_SOURCE[0]}"))

# Define directory paths relative to the main directory
ModelsDir="$MainDir/Models"
OutputDir="$MainDir/Output"
RepoDir="$MainDir/Repos"
StorageDir="$MainDir/Storage"
SystemDir="$MainDir/System"
VEnvDir="$MainDir/VEnv"

# Code directories
CodeDir="$SystemDir/code"
CommandsCodeDir="$SystemDir/commands"
HelpersCodeDir="$SystemDir/helpers"
ProjectsCodeDir="$SystemDir/projects"

# Models directories
ModelsCodeformerDir="$ModelsDir/Codeformer"
ModelsControlnetDir="$ModelsDir/ControlNet"
ModelsEmbeddingsDir="$ModelsDir/embeddings"
ModelsEsrganDir="$ModelsDir/ESRGAN"
ModelsGfpganDir="$ModelsDir/GFPGAN"
ModelsHypernetworkDir="$ModelsDir/hypernetworks"
ModelsLdsrDir="$ModelsDir/LDSR"
ModelsLoraDir="$ModelsDir/Lora"
ModelsRealesrganDir="$ModelsDir/RealESRGAN"
ModelsScunetDir="$ModelsDir/ScuNET"
ModelsStableDiffusionDir="$ModelsDir/Stable-diffusion"
ModelsStylesDir="$ModelsDir/styles"
ModelsSwinirDir="$ModelsDir/SwinIR"
ModelsVaeDir="$ModelsDir/VAE"


# Compatible version of Python to be used in the virtual environment.
# ATTENTION: The version must be 3.10 or lower!
CompatiblePython='python3.10'

# The project port (leave empty to use default port)
# Requires root rights for ports < 1024
ProjectPort=8086

## Subdirectories of /Modules (a string with space-separated names)
#ValidModelsSubdirs='
#BLIP Codeformer deepbooru embeddings ESRGAN GFPGAN hypernetworks karlo
#LDSR Lora RealESRGAN ScuNET Stable-diffusion SwinIR VAE VAE-approx'


function is_valid_command() {
    local command_name=$1
    [[ -f "$CommandsCodeDir/$command_name.sh" ]]
    #----------------------------------------------------------
    ## allowed commands (a string with space-separated values)
    #local ValidCommands='install remove launch info setdir python pip verify add2path'
    #[[ " $ValidCommands " == *" $command "* ]]
    #----------------------------------------------------------
}

#================================== START ==================================#

# load helper functions
source "$HelpersCodeDir/misc.sh"
source "$HelpersCodeDir/directories.sh"
source "$HelpersCodeDir/projects_db.sh"
source "$HelpersCodeDir/virtual_env.sh"
change_to_main_directory
load_projects_db "$ProjectsCodeDir/list.csv"

# loop through all the script parameters
show_help=false
show_version=false
has_parameters=false
while [ $# -gt 0 ]; do
    param=$1
    CommandParams+=( "$param" )
    case "$param" in
        -h | --help)
            show_help=true
            ;;
        -v | --version)
            show_version=true
            ;;
        -*)
            ;;
        *)
            if [[ -z $CommandName ]]; then
                CommandName=$param
                length=${#CommandParams[@]}
                unset 'CommandParams[length-1]'
            else
                has_parameters=true
            fi
            ;;
    esac
    shift
done

# try to extract the project name from the command name
# (the user can use the dot to enter both, e.g., "webui.install").
if [[ "$CommandName" == *'.'* ]]; then
    ProjectName=${CommandName%%.*}
    CommandName=${CommandName#*.}
    # correct if the user mistakenly reverses the command and project name
    if is_valid_command "$ProjectName" ; then
        temp=$ProjectName
        ProjectName=$CommandName
        CommandName=$temp
    fi
fi

# if the user did not provide any command, then force the help to be displayed.
# if the user provided a command but it is invalid, then print an error and exit.
if [[ -z "$CommandName" ]]; then
    show_help=true
elif ! is_valid_command "$CommandName"; then
    fatal_error "Invalid command - $CommandName" \
                "To view the available commands, please run: ./$ScriptName --help"
    exit 1
fi

# load the selected command's code
if [[ -n "$CommandName" ]]; then
    source "$CommandsCodeDir/$CommandName.sh"
fi

# if the user did not provide any parameters
# then check if it's necessary to print help or version
if [[ $has_parameters == false ]]; then
    if [[ $show_version == true ]]; then
        echo $ScriptVer
        exit 0
    elif [[ $show_help == true ]]; then
        echo "$Help"
        exit 0
    fi
fi

# If the user provided a project name, ensure that it is a valid name
if [[ "$ProjectName" ]]; then
    if ! is_valid_project "$ProjectName"; then
        fatal_error "Project '$ProjectName' is not recognized" \
            "To see a list of available projects, use: ./aiman list"
    fi
# If no project name is provided, use the first parameter as the project name
else
    if is_valid_project "${CommandParams[0]}"; then
        ProjectName=${CommandParams[0]}
        CommandParams=( "${CommandParams[@]:1}" )
    fi
fi

# run the command code
run_command "${CommandParams[@]}"
exit $?


