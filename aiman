#!/usr/bin/env bash
# File    : aiman
# Brief   : Main script
# Author  : Martin Rizzo | <martinrizzo@gmail.com>
# Date    : May 5, 2023
# Repo    : https://github.com/martin-rizzo/AIMan
# License : MIT
#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#                                    AIMan
#        A basic package management system for AI open source projects
#   
#     Copyright (c) 2023 Martin Rizzo
#     
#     Permission is hereby granted, free of charge, to any person obtaining
#     a copy of this software and associated documentation files (the
#     "Software"), to deal in the Software without restriction, including
#     without limitation the rights to use, copy, modify, merge, publish,
#     distribute, sublicense, and/or sell copies of the Software, and to
#     permit persons to whom the Software is furnished to do so, subject to
#     the following conditions:
#     
#     The above copyright notice and this permission notice shall be
#     included in all copies or substantial portions of the Software.
#     
#     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
#     EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
#     MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
#     IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
#     CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
#     TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE
#     SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
ScriptName=${BASH_SOURCE[0]##*/}
ScriptVer=0.1
Help="
Usage: $ScriptName [options] COMMAND

  A command-line package manager for AI open source projects.

Commands:
    install         Install projects on the aiman directory.
    remove          Remove installed projects.
    launch          Launch a project.
    info            Display details about a project or group of projects.
    list            List projects.
    help            Display help information.
    reinstall       Reinstall a project.
    setdir          Change directories used by the AI applications.
    python          Manage the python virtual envionment.
    verify          Verify directories, repos and other aiman elements.

Run '$ScriptName COMMAND --help' for more information on a command.

Options:
    -h, --help      Show command help
    -V, --version   Show $ScriptName version and exit

Examples:
    $ScriptName info webui
    $ScriptName launch invoke
"

# Directories
MainDir=$(realpath $(dirname "${BASH_SOURCE[0]}") )
ModelsDir="$MainDir/Models"
OutputDir="$MainDir/Output"
RepoDir="$MainDir/Repos"
StorageDir="$MainDir/Storage"
SystemDir="$MainDir/System"
CodeDir="$SystemDir/code"
PythonDir="$SystemDir/venv"

# Models directories
ModelsCodeformerDir="$ModelsDir/Codeformer"
ModelsEmbeddingsDir="$ModelsDir/embeddings"
ModelsEsrganDir="$ModelsDir/ESRGAN"
ModelsGfpganDir="$ModelsDir/GFPGAN"
ModelsHypernetworkDir="$ModelsDir/hypernetworks"
ModelsLdsrDir="$ModelsDir/LDSR"
ModelsLoraDir="$ModelsDir/Lora"
ModelsRealesrganDir="$ModelsDir/RealESRGAN"
ModelsScunetDir="$ModelsDir/ScuNET"
ModelsStableDiffusionDir="$ModelsDir/Stable-diffusion"
ModelsSwinirDir="$ModelsDir/SwinIR"
ModelsVaeDir="$ModelsDir/VAE"


# Compatible version of Python to be used in the virtual environment.
# ATTENTION: The version must be 3.10 or lower!
CompatiblePython='python3.10'

# Prompt to be displayed when the virtual Python environment is activated
PythonPrompt="aiman-$CompatiblePython"

# Allowed commands (a string with space-separated values)
ValidCommands='install remove launch info setdir python verify add2path' #"launch config"

# Subdirectories of /Modules (a string with space-separated names)
ValidModelsSubdirs='
BLIP Codeformer deepbooru embeddings ESRGAN GFPGAN hypernetworks karlo
LDSR Lora RealESRGAN ScuNET Stable-diffusion SwinIR VAE VAE-approx'


#================================== START ==================================#
source "$CodeDir/helpers.sh"
source "$CodeDir/helper-dir.sh"
change_to_main_directory

command=''
projects=''
options=''
show_help=false
show_version=false

# loop through all the script parameters
all_parameters=("$@")
while [ $# -gt 0 ]; do
    param=$1
    case "$param" in
        -h | --help)          show_help=true             ;;
        -v | --version)       show_version=true          ;;
        -*)                   options="$options $param"  ;;
        *)
          if [[ " $ValidCommands " == *" $param "* ]]; then
            command=$param
          else 
            projects="$projects $param"
          fi
          ;;
    esac
    shift
done
# trim leading spaces from acumulative strings
options=${options#" "}
projects=${projects#" "}

# load the selected command's code
# if no command is selected then force the help to be displayed
if [[ -n $command ]]; then
    source "$CodeDir/cmd-$command.sh"
else
    show_help=true
fi

# print help or version
if $show_help; then
    echo "$Help"
    exit 0
elif $show_version; then
    echo $ScriptVer
    exit 0
fi

# run the command code
require_storage_directory

if [[ $CommandMode == all-parameters ]]; then
    run_command "${all_parameters[@]}"
else
    run_command "$options" "$projects"
fi
exit $?

